        -:    0:Source:/home/drowlia/code_save/ds/LinkedList/LinkedList.hpp
        -:    0:Graph:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/HashTable/HashTableTest.cpp.gcno
        -:    0:Data:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/HashTable/HashTableTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <iostream>
        -:    4:
        -:    5:namespace ds {
        -:    6:
        -:    7:template <typename ElemType>
        -:    8:struct Node {
        -:    9:    ElemType data_;
        -:   10:    Node* next_;
        -:   11:    Node* prev_;
        -:   12:
function _ZN2ds4NodeINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2ERKS8_ called 5 returned 100% blocks executed 100%
        5:   13:    explicit Node(const ElemType& val) : data_{val}, next_{nullptr}, prev_{nullptr} {
        5:   13-block 2
call    0 returned 5
        5:   14:    }
        -:   15:
function _ZN2ds4NodeINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED2Ev called 5 returned 100% blocks executed 100%
        5:   16:    ~Node() {
        5:   17:        next_ = nullptr;
        5:   18:        prev_ = nullptr;
        5:   19:    }
        5:   19-block 2
call    0 returned 5
        -:   20:
        -:   21:    Node(const Node& ano_node) : data_{ano_node.data_}, next_{nullptr}, prev_{nullptr} {
        -:   22:    }
        -:   23:};
        -:   24:
        -:   25:template <typename ElemType>
        -:   26:struct LinkedList {
        -:   27:
        -:   28:struct Iterator {
        -:   29:    Node<ElemType>* node_;
        -:   30:
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8IteratorC2EPNS_4NodeIS8_EE called 27 returned 100% blocks executed 100%
       27:   31:    explicit Iterator(Node<ElemType>* node = nullptr) : node_{node} {}
        -:   32:
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8IteratorppEv called 0 returned 0% blocks executed 0%
    #####:   33:    Iterator& operator++() {
    #####:   34:        if (node_ != nullptr) {
    %%%%%:   34-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   35:            node_ = node_->next_;
    %%%%%:   35-block 3
        -:   36:        }
    #####:   37:        return *this;
    %%%%%:   37-block 4
        -:   38:    }
        -:   39:    Iterator operator++(int) {
        -:   40:        Iterator temp = *this;
        -:   41:        ++(*this);
        -:   42:        return temp;
        -:   43:    }
        -:   44:
        -:   45:    Iterator& operator--() {
        -:   46:        if (node_ != nullptr) {
        -:   47:            node_ = node_->prev_;
        -:   48:        }
        -:   49:        return *this;
        -:   50:    }
        -:   51:    Iterator operator--(int) {
        -:   52:        Iterator temp = *this;
        -:   53:        --(*this);
        -:   54:        return temp;
        -:   55:    }
        -:   56:
        -:   57:    Iterator& operator+=(const size_t n) {
        -:   58:        for (size_t i = 0; i < n && node_ != nullptr; ++i) {
        -:   59:            node_ = node_->next_;
        -:   60:        }
        -:   61:        return *this;
        -:   62:    }
        -:   63:    Iterator& operator-=(const size_t n) {
        -:   64:        for (size_t i = 0; i < n && node_ != nullptr; ++i) {
        -:   65:            node_ = node_->prev_;
        -:   66:        }
        -:   67:        return *this;
        -:   68:    }
        -:   69:
        -:   70:    ElemType& operator*() {
        -:   71:        return node_->data_;
        -:   72:    }
        -:   73:    const ElemType& operator*() const {
        -:   74:        return node_->data_;
        -:   75:    }
        -:   76:
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8IteratorptEv called 9 returned 100% blocks executed 100%
        9:   77:    ElemType* operator->() {
        9:   78:        return &(node_->data_);
        9:   78-block 2
        -:   79:    }
        -:   80:    const ElemType* operator->() const {
        -:   81:        return &(node_->data_);
        -:   82:    }
        -:   83:
        -:   84:    bool operator==(const Iterator& other) const {
        -:   85:        return node_ == other.node_;
        -:   86:    }
function _ZNK2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8IteratorneERKSA_ called 13 returned 100% blocks executed 100%
       13:   87:    bool operator!=(const Iterator& other) const {
       13:   88:        return node_ != other.node_;
       13:   88-block 2
        -:   89:    }
        -:   90:
        -:   91:};
        -:   92:
        -:   93:    Node<ElemType>* head_;
        -:   94:    Node<ElemType>* tail_;
        -:   95:
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2Ev called 30 returned 100% blocks executed 100%
       30:   96:    LinkedList() : head_{nullptr}, tail_{nullptr} {}
        -:   97:
        -:   98:    explicit LinkedList(ElemType val) : head_{new Node<ElemType>(val)}, tail_{head_} {}
        -:   99:
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED2Ev called 30 returned 100% blocks executed 100%
       30:  100:    ~LinkedList() { clear(); }
       30:  100-block 2
call    0 returned 30
        -:  101:
        -:  102:    LinkedList(const LinkedList& ano_list) : head_{nullptr}, tail_{nullptr} {
        -:  103:        if (ano_list.head_ != nullptr) {
        -:  104:            head_ = new Node<ElemType>(ano_list.head_->data_);
        -:  105:            tail_ = head_;
        -:  106:            Node<ElemType>* this_current = head_;
        -:  107:            Node<ElemType>* ano_current = ano_list.head_->next_;
        -:  108:
        -:  109:            while (ano_current != nullptr) {
        -:  110:                this_current->next_ = new Node<ElemType>(ano_current->data_);
        -:  111:                this_current->next_->prev_ = this_current;
        -:  112:                this_current = this_current->next_;
        -:  113:                tail_ = this_current;
        -:  114:                ano_current = ano_current->next_;
        -:  115:            }
        -:  116:        }
        -:  117:    }
        -:  118:
        -:  119:    LinkedList& operator=(const LinkedList& ano_list) {
        -:  120:        if (this != &ano_list) {
        -:  121:            clear();
        -:  122:
        -:  123:            if (ano_list.head_ != nullptr) {
        -:  124:                head_ = new Node<ElemType>(ano_list.head_->data_);
        -:  125:                tail_ = head_;
        -:  126:                Node<ElemType>* this_current = head_;
        -:  127:                Node<ElemType>* ano_current = ano_list.head_->next_;
        -:  128:
        -:  129:                while (ano_current != nullptr) {
        -:  130:                    this_current->next_ = new Node<ElemType>(ano_current->data_);
        -:  131:                    this_current->next_->prev_ = this_current;
        -:  132:                    this_current = this_current->next_;
        -:  133:                    tail_ = this_current;
        -:  134:                    ano_current = ano_current->next_;
        -:  135:                }
        -:  136:            }
        -:  137:            else {
        -:  138:                head_ = nullptr;
        -:  139:                tail_ = nullptr;
        -:  140:            }
        -:  141:        }
        -:  142:        return *this;
        -:  143:    }
        -:  144:
        -:  145:
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE5clearEv called 30 returned 100% blocks executed 100%
       30:  146:    void clear() {
       30:  147:        Node<ElemType>* current = head_;
       34:  148:        while (current != nullptr) {
       30:  148-block 2
       34:  148-block 7
branch  0 taken 4
branch  1 taken 30 (fallthrough)
        4:  149:            Node<ElemType>* next = current->next_;
        4:  150:            delete current;
        4:  150-block 3
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  150-block 4
call    2 returned 4
call    3 returned 4
        4:  151:            current = next;
        4:  151-block 6
        -:  152:        }
       30:  153:        head_ = nullptr;
       30:  154:        tail_ = nullptr;
       30:  155:    }
        -:  156:
        -:  157:    void push_front(const ElemType& val) {
        -:  158:        Node<ElemType>* new_node = new Node(val);
        -:  159:        new_node->next_ = head_;
        -:  160:        if (head_ != nullptr) {
        -:  161:            head_->prev_ = new_node;
        -:  162:        }
        -:  163:        head_ = new_node;
        -:  164:        if (tail_ == nullptr) {
        -:  165:            tail_ = new_node;
        -:  166:        }
        -:  167:    }
        -:  168:
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9push_backERKS8_ called 5 returned 100% blocks executed 70%
        5:  169:    void push_back(const ElemType& val) {
        5:  170:        Node<ElemType>* new_node = new Node(val);
        5:  170-block 2
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  170-block 9
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  170-block 10
call    6 never executed
        5:  171:        if (tail_ != nullptr) {
        5:  171-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:  172:            tail_->next_ = new_node;
    #####:  173:            new_node->prev_ = tail_;
    %%%%%:  173-block 5
        -:  174:        }
        5:  175:        tail_ = new_node;
        5:  176:        if (head_ == nullptr) {
        5:  176-block 6
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  177:            head_ = new_node;
        5:  177-block 7
        -:  178:        }
        5:  179:    }
        5:  179-block 8
        -:  180:
        -:  181:    Iterator insert(Iterator pos, const ElemType& val) {
        -:  182:        Node<ElemType>* new_node = new Node(val);
        -:  183:        Node<ElemType>* current = pos.node_;
        -:  184:
        -:  185:        if (current == nullptr) {
        -:  186:            push_back(val);
        -:  187:            return Iterator(tail_);
        -:  188:        }
        -:  189:
        -:  190:        new_node->next_ = current;
        -:  191:        new_node->prev_ = current->prev_;
        -:  192:
        -:  193:        if (current->prev_ != nullptr) {
        -:  194:            current->prev_->next_ = new_node;
        -:  195:        }
        -:  196:        else {
        -:  197:            head_ = new_node;
        -:  198:        }
        -:  199:
        -:  200:        current->prev_ = new_node;
        -:  201:
        -:  202:        return Iterator(new_node);
        -:  203:    }
        -:  204:
        -:  205:    void pop_front() {
        -:  206:        if (head_ == nullptr)
        -:  207:            return;
        -:  208:
        -:  209:        Node<ElemType>* old_head = head_;
        -:  210:        head_ = head_->next_;
        -:  211:
        -:  212:        if (head_ != nullptr) {
        -:  213:            head_->prev_ = nullptr;
        -:  214:        } else {
        -:  215:            tail_ = nullptr;
        -:  216:        }
        -:  217:
        -:  218:        delete old_head;
        -:  219:    }
        -:  220:
        -:  221:    void pop_back() {
        -:  222:        if (head_ == nullptr)
        -:  223:            return;
        -:  224:        if (head_->next_ == nullptr) {
        -:  225:            delete head_;
        -:  226:            head_ = nullptr;
        -:  227:            tail_ = nullptr;
        -:  228:            return;
        -:  229:        }
        -:  230:
        -:  231:        Node<ElemType>* current = tail_;
        -:  232:        tail_ = tail_->prev_;
        -:  233:        tail_->next_ = nullptr;
        -:  234:
        -:  235:        delete current;
        -:  236:    }
        -:  237:
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE5eraseENS9_8IteratorE called 1 returned 100% blocks executed 80%
        1:  238:    Iterator erase(Iterator pos) {
        1:  239:        Node<ElemType>* current = pos.node_;
        1:  240:        if (current == nullptr) {
        1:  240-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  241:            return end();
    %%%%%:  241-block 3
call    0 never executed
        -:  242:        }
        -:  243:
        1:  244:        Node<ElemType>* next = current->next_;
        1:  245:        Node<ElemType>* prev = current->prev_;
        -:  246:
        1:  247:        if (prev != nullptr) {
        1:  247-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  248:            prev->next_ = next;
    %%%%%:  248-block 5
        -:  249:        }
        -:  250:        else {
        1:  251:            head_ = next;
        1:  251-block 6
        -:  252:        }
        -:  253:
        1:  254:        if (next != nullptr) {
        1:  254-block 7
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  255:            next->prev_ = prev;
    %%%%%:  255-block 8
        -:  256:        }
        -:  257:        else {
        1:  258:            tail_ = prev;
        1:  258-block 9
        -:  259:        }
        -:  260:
        1:  261:        delete current;
        1:  261-block 10
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  261-block 11
call    2 returned 1
call    3 returned 1
        -:  262:
        1:  263:        return Iterator(next);
        1:  263-block 13
call    0 returned 1
        1:  263-block 15
        -:  264:    }
        -:  265:
        -:  266:    [[nodiscard]] bool find(const ElemType& val) const {
        -:  267:        Node<ElemType>* current = head_;
        -:  268:        while (current != nullptr) {
        -:  269:            if (current->data_ == val)
        -:  270:                return true;
        -:  271:            current = current->next_;
        -:  272:        }
        -:  273:
        -:  274:        return false;
        -:  275:    }
        -:  276:
        -:  277:    void print() const {
        -:  278:        Node<ElemType>* current = head_;
        -:  279:        while (current != nullptr) {
        -:  280:            std::cout << current->data_ << " ";
        -:  281:            current = current->next_;
        -:  282:        }
        -:  283:        std::cout << std::endl;
        -:  284:    }
        -:  285:
        -:  286:    [[nodiscard]] bool empty()  const { return head_ == nullptr; }
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE5beginEv called 8 returned 100% blocks executed 100%
        8:  287:    Iterator           begin()        { return Iterator(head_); }
        8:  287-block 2
call    0 returned 8
        8:  287-block 4
function _ZN2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE3endEv called 8 returned 100% blocks executed 100%
        8:  288:    Iterator           end()          { return Iterator(nullptr); }
        8:  288-block 2
call    0 returned 8
        8:  288-block 4
function _ZNK2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE5beginEv called 5 returned 100% blocks executed 100%
        5:  289:    Iterator           begin()  const { return Iterator(head_); }
        5:  289-block 2
call    0 returned 5
        5:  289-block 4
function _ZNK2ds10LinkedListINS_4PairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE3endEv called 5 returned 100% blocks executed 100%
        5:  290:    Iterator           end()    const { return Iterator(nullptr); }
        5:  290-block 2
call    0 returned 5
        5:  290-block 4
        -:  291:};
        -:  292:
        -:  293:}
