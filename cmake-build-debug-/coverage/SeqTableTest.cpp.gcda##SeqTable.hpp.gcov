        -:    0:Source:/home/drowlia/code_save/ds/SeqTable/SeqTable.hpp
        -:    0:Graph:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/SeqTable/SeqTableTest.cpp.gcno
        -:    0:Data:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/SeqTable/SeqTableTest.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by lsx31 on 24-12-9.
        -:    3://
        -:    4:
        -:    5:#pragma once
        -:    6:
        -:    7:#include <iostream>
        -:    8:#include <algorithm>
        -:    9:
        -:   10:namespace ds {
        -:   11:
        -:   12:template <typename ElemType>
        -:   13:struct SeqTable {
        -:   14:	size_t size_;
        -:   15:	size_t capacity_;
        -:   16:	ElemType *array_;
        -:   17:
function _ZN2ds8SeqTableIiEC2Ev called 0 returned 0% blocks executed 0%
    #####:   18:	SeqTable() : size_{0}, capacity_{0}, array_{nullptr} {}
        -:   19:
function _ZN2ds8SeqTableIiEC2Em called 12 returned 100% blocks executed 67%
       12:   20:	explicit SeqTable(size_t size) :
       12:   21:		size_{size},
      12*:   22:		capacity_{size ? 2 * size : 0},
       12:   22-block 2
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12:   22-block 3
    %%%%%:   22-block 4
      88*:   23:		array_{size ? new ElemType[capacity_]() : nullptr} {
       12:   23-block 5
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12:   23-block 6
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12:   23-block 7
    %%%%%:   23-block 8
call    4 never executed
       12:   23-block 9
call    5 returned 12
branch  6 taken 12 (fallthrough)
branch  7 taken 0 (throw)
       12:   23-block 10
       76:   23-block 11
       88:   23-block 12
branch  8 taken 76
branch  9 taken 12 (fallthrough)
       12:   23-block 13
    %%%%%:   23-block 14
    $$$$$:   23-block 16
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:   23-block 17
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:   23-block 18
call   14 never executed
       12:   24:	}
       12:   24-block 15
        -:   25:
function _ZN2ds8SeqTableIiED2Ev called 0 returned 0% blocks executed 0%
    #####:   26:	~SeqTable() {
    #####:   27:		delete[] array_;
    %%%%%:   27-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   27-block 3
call    2 never executed
    #####:   28:		array_ = nullptr;
    #####:   29:	}
        -:   30:
function _ZN2ds8SeqTableIiEC2ERKS1_ called 1 returned 100% blocks executed 71%
        1:   31:	SeqTable(const SeqTable& ano_table) :
        1:   32:		size_{ano_table.size_},
        1:   33:		capacity_{ano_table.capacity_},
       7*:   34:		array_{ano_table.size_ ? new ElemType[ano_table.capacity_]() : nullptr} {
        1:   34-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   34-block 3
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   34-block 4
    %%%%%:   34-block 5
call    4 never executed
        1:   34-block 6
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   34-block 7
        6:   34-block 8
        7:   34-block 9
branch  8 taken 6
branch  9 taken 1 (fallthrough)
        1:   34-block 10
    %%%%%:   34-block 11
    $$$$$:   34-block 15
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:   34-block 16
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:   34-block 17
call   14 never executed
        1:   35:			if (ano_table.size_ > 0)
        1:   35-block 12
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   36:				std::copy(ano_table.array_, ano_table.array_ + size_, array_);
        1:   36-block 13
call    0 returned 1
        1:   37:	}
        1:   37-block 14
        -:   38:
function _ZN2ds8SeqTableIiEaSERKS1_ called 1 returned 100% blocks executed 68%
        1:   39:	SeqTable& operator=(const SeqTable& ano_table) {
        1:   40:		if (this == &ano_table)
        1:   40-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   41:			return *this;
    %%%%%:   41-block 3
        -:   42:
       1*:   43:		delete[] array_;
        1:   43-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   43-block 5
call    2 never executed
        -:   44:
        1:   45:		size_ = ano_table.size_;
        1:   46:		capacity_ = ano_table.capacity_;
       7*:   47:		array_ = ano_table.size_ ? new ElemType[ano_table.capacity_]() : nullptr;
        1:   47-block 6
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   47-block 7
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   47-block 8
    %%%%%:   47-block 9
call    4 never executed
        1:   47-block 10
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   47-block 11
        6:   47-block 12
        7:   47-block 13
branch  8 taken 6
branch  9 taken 1 (fallthrough)
        1:   47-block 14
    %%%%%:   47-block 15
    $$$$$:   47-block 20
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:   47-block 21
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:   47-block 22
call   14 never executed
        -:   48:
        1:   49:		if (ano_table.size_ > 0) {
        1:   49-block 16
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   50:			std::copy(ano_table.array_, ano_table.array_ + size_, array_);
        1:   50-block 17
call    0 returned 1
        -:   51:		}
        -:   52:
        1:   53:		return *this;
        1:   53-block 18
        -:   54:	}
        -:   55:
function _ZN2ds8SeqTableIiEC2EOS1_ called 1 returned 100% blocks executed 100%
        1:   56:	SeqTable(SeqTable&& ano_table) noexcept :
        1:   57:		size_{ano_table.size_},
        1:   58:		capacity_{ano_table.capacity_},
        1:   59:		array_{ano_table.array_} {
        1:   60:			ano_table.size_ = 0;
        1:   61:			ano_table.capacity_ = 0;
        1:   62:			ano_table.array_ = nullptr;
        1:   63:	}
        -:   64:
function _ZN2ds8SeqTableIiEaSEOS1_ called 1 returned 100% blocks executed 67%
        1:   65:	SeqTable& operator=(SeqTable&& ano_table) noexcept {
        1:   66:		if (this == &ano_table)
        1:   66-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   67:			return *this;
    %%%%%:   67-block 3
        -:   68:
       1*:   69:		delete[] array_;
        1:   69-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   69-block 5
call    2 never executed
        -:   70:
        1:   71:		size_ = ano_table.size_;
        1:   72:		capacity_ = ano_table.capacity_;
        1:   73:		array_ = ano_table.array_;
        -:   74:
        1:   75:		ano_table.size_ = 0;
        1:   76:		ano_table.capacity_ = 0;
        1:   77:		ano_table.array_ = nullptr;
        -:   78:
        1:   79:		return *this;
        1:   79-block 6
        -:   80:	}
        -:   81:
function _ZN2ds8SeqTableIiE6resizeERKm called 0 returned 0% blocks executed 0%
    #####:   82:	void resize(const size_t& new_size) {
    #####:   83:		if (new_size == 0) {
    %%%%%:   83-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   84:			delete[] array_;
    %%%%%:   84-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   84-block 4
call    2 never executed
    #####:   85:			size_ = 0;
    #####:   86:			capacity_ = 0;
    #####:   87:			array_ = nullptr;
    #####:   88:			return;
    %%%%%:   88-block 5
        -:   89:		}
        -:   90:
    #####:   91:		auto *new_array = new ElemType[new_size]();
    %%%%%:   91-block 6
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   91-block 7
    %%%%%:   91-block 8
call    2 never executed
    %%%%%:   91-block 9
call    3 never executed
    %%%%%:   91-block 11
    %%%%%:   91-block 12
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:   92:		auto copy_size = std::min(size_, new_size);
    %%%%%:   92-block 13
call    0 never executed
    #####:   93:		std::copy(array_, array_ + copy_size, new_array);
call    0 never executed
        -:   94:
    #####:   95:		delete[] array_;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   95-block 16
call    2 never executed
        -:   96:
    #####:   97:		if (new_size < size_)
    %%%%%:   97-block 17
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   98:			size_ = new_size;
    %%%%%:   98-block 18
        -:   99:
    #####:  100:		capacity_ = new_size;
        -:  101:
    #####:  102:		array_ = new_array;
    %%%%%:  102-block 19
        -:  103:	}
        -:  104:
function _ZN2ds8SeqTableIiE9push_backERKi called 0 returned 0% blocks executed 0%
    #####:  105:	void push_back(const ElemType& elem) {
    #####:  106:		if (size_ >= capacity_)
    %%%%%:  106-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  107:			resize(capacity_ == 0 ? 1 : capacity_ * 2);
    %%%%%:  107-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  107-block 4
    %%%%%:  107-block 5
    %%%%%:  107-block 6
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  107-block 7
        -:  108:
    #####:  109:		array_[size_] = elem;
    #####:  110:		++size_;
    #####:  111:	}
    %%%%%:  111-block 8
        -:  112:
function _ZN2ds8SeqTableIiE6insertERKmRKi called 1 returned 100% blocks executed 33%
        1:  113:	void insert(const size_t& pos, const ElemType& elem) {
        1:  114:		if (pos > size_)
        1:  114-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  115:			throw std::out_of_range("Index out of range");
    %%%%%:  115-block 3
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  115-block 5
call    4 never executed
    $$$$$:  115-block 14
call    5 never executed
        -:  116:
        1:  117:		if (size_ >= capacity_)
        1:  117-block 6
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  118:			resize(capacity_ == 0 ? 1 : capacity_ * 2);
    %%%%%:  118-block 7
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  118-block 8
    %%%%%:  118-block 9
    %%%%%:  118-block 10
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  118-block 11
        -:  119:
        1:  120:		std::move(array_ + pos, array_ + size_, array_ + pos + 1);
        1:  120-block 12
call    0 returned 1
        -:  121:
        1:  122:		array_[pos] = elem;
        1:  123:		++size_;
        1:  124:	}
        -:  125:
function _ZN2ds8SeqTableIiE8pop_backEv called 0 returned 0% blocks executed 0%
    #####:  126:	void pop_back() {
    #####:  127:		if (size_ > 0)
    %%%%%:  127-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  128:			--size_;
    %%%%%:  128-block 3
    #####:  129:	}
        -:  130:
function _ZN2ds8SeqTableIiE5eraseERKm called 1 returned 100% blocks executed 50%
        1:  131:	void erase(const size_t& pos) {
        1:  132:		if (pos >= size_)
        1:  132-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  133:			throw std::out_of_range("Index out of range");
    %%%%%:  133-block 3
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  133-block 5
call    4 never executed
    $$$$$:  133-block 8
call    5 never executed
        -:  134:
        1:  135:		std::move(array_ + pos + 1, array_ + size_, array_ + pos);
        1:  135-block 6
call    0 returned 1
        -:  136:
        1:  137:		--size_;
        1:  138:	}
        -:  139:
function _ZNK2ds8SeqTableIiE2atERKm called 4 returned 75% blocks executed 88%
        4:  140:	const ElemType& at(const size_t& pos) const {
        4:  141:		if (pos >= size_)
        4:  141-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  142:			throw std::out_of_range("Index out of range");
        1:  142-block 3
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  142-block 5
call    4 returned 0
    $$$$$:  142-block 8
call    5 never executed
        -:  143:
        3:  144:		return array_[pos];
        3:  144-block 6
        3:  144-block 7
        -:  145:	}
        -:  146:
function _ZN2ds8SeqTableIiEixERKm called 63 returned 98% blocks executed 88%
       63:  147:	ElemType& operator[](const size_t& pos) {
       63:  148:		if (pos >= size_)
       63:  148-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 62
        1:  149:			throw std::out_of_range("Index out of range");
        1:  149-block 3
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  149-block 5
call    4 returned 0
    $$$$$:  149-block 8
call    5 never executed
        -:  150:
       62:  151:		return array_[pos];
       62:  151-block 6
       62:  151-block 7
        -:  152:	}
        -:  153:
        -:  154:	const ElemType& operator[](const size_t& pos) const {
        -:  155:		if (pos >= size_)
        -:  156:			throw std::out_of_range("Index out of range");
        -:  157:
        -:  158:		return array_[pos];
        -:  159:	}
        -:  160:
function _ZNK2ds8SeqTableIiE5frontEv called 1 returned 100% blocks executed 100%
        1:  161:	const ElemType& front() const {
        1:  162:		return array_[0];
        1:  162-block 2
        -:  163:	}
        -:  164:
function _ZNK2ds8SeqTableIiE4backEv called 0 returned 0% blocks executed 0%
    #####:  165:	const ElemType& back() const {
    #####:  166:		return array_[size_ - 1];
    %%%%%:  166-block 2
        -:  167:	}
        -:  168:
function _ZNK2ds8SeqTableIiE5emptyEv called 0 returned 0% blocks executed 0%
    #####:  169:	[[nodiscard]] bool            empty()    const { return size_ == 0; }
    %%%%%:  169-block 2
        -:  170:
function _ZNK2ds8SeqTableIiE4sizeEv called 0 returned 0% blocks executed 0%
    #####:  171:	[[nodiscard]] size_t          size()     const { return size_; }
    %%%%%:  171-block 2
function _ZNK2ds8SeqTableIiE8capacityEv called 13 returned 100% blocks executed 100%
       13:  172:	[[nodiscard]] size_t          capacity() const { return capacity_; }
       13:  172-block 2
        -:  173:
function _ZNK2ds8SeqTableIiE5beginEv called 1 returned 100% blocks executed 100%
        1:  174:	[[nodiscard]] ElemType*       begin()    const { return array_; }
        1:  174-block 2
function _ZNK2ds8SeqTableIiE6cbeginEv called 1 returned 100% blocks executed 100%
        1:  175:	[[nodiscard]] const ElemType* cbegin()   const { return array_; }
        1:  175-block 2
        -:  176:
function _ZNK2ds8SeqTableIiE3endEv called 1 returned 100% blocks executed 100%
        1:  177:	[[nodiscard]] ElemType*       end()      const { return array_ + size_; }
        1:  177-block 2
function _ZNK2ds8SeqTableIiE4cendEv called 1 returned 100% blocks executed 100%
        1:  178:	[[nodiscard]] const ElemType* cend()     const { return array_ + size_; }
        1:  178-block 2
        -:  179:
        -:  180:	void print() const {
        -:  181:		for (size_t i = 0; i < size_; ++i) {
        -:  182:			std::cout << array_[i] << " ";
        -:  183:		}
        -:  184:		std::cout << std::endl;
        -:  185:	}
        -:  186:};
        -:  187:
        -:  188:}
