        -:    0:Source:/home/drowlia/code_save/ds/SeqTable/SeqTable.hpp
        -:    0:Graph:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/Stack/StackTest.cpp.gcno
        -:    0:Data:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/Stack/StackTest.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by lsx31 on 24-12-9.
        -:    3://
        -:    4:
        -:    5:#pragma once
        -:    6:
        -:    7:#include <iostream>
        -:    8:#include <algorithm>
        -:    9:
        -:   10:namespace ds {
        -:   11:
        -:   12:template <typename ElemType>
        -:   13:struct SeqTable {
        -:   14:	size_t size_;
        -:   15:	size_t capacity_;
        -:   16:	ElemType *array_;
        -:   17:
function _ZN2ds8SeqTableIiEC2Ev called 17 returned 100% blocks executed 100%
       17:   18:	SeqTable() : size_{0}, capacity_{0}, array_{nullptr} {}
        -:   19:
        -:   20:	explicit SeqTable(size_t size) :
        -:   21:		size_{size},
        -:   22:		capacity_{size ? 2 * size : 0},
        -:   23:		array_{size ? new ElemType[capacity_]() : nullptr} {
        -:   24:	}
        -:   25:
function _ZN2ds8SeqTableIiED2Ev called 31 returned 100% blocks executed 100%
       31:   26:	~SeqTable() {
       31:   27:		delete[] array_;
       31:   27-block 2
branch  0 taken 27 (fallthrough)
branch  1 taken 4
       27:   27-block 3
call    2 returned 27
       31:   28:		array_ = nullptr;
       31:   29:	}
        -:   30:
        -:   31:	SeqTable(const SeqTable& ano_table) :
        -:   32:		size_{ano_table.size_},
        -:   33:		capacity_{ano_table.capacity_},
        -:   34:		array_{ano_table.size_ ? new ElemType[ano_table.capacity_]() : nullptr} {
        -:   35:			if (ano_table.size_ > 0)
        -:   36:				std::copy(ano_table.array_, ano_table.array_ + size_, array_);
        -:   37:	}
        -:   38:
        -:   39:	SeqTable& operator=(const SeqTable& ano_table) {
        -:   40:		if (this == &ano_table)
        -:   41:			return *this;
        -:   42:
        -:   43:		delete[] array_;
        -:   44:
        -:   45:		size_ = ano_table.size_;
        -:   46:		capacity_ = ano_table.capacity_;
        -:   47:		array_ = ano_table.size_ ? new ElemType[ano_table.capacity_]() : nullptr;
        -:   48:
        -:   49:		if (ano_table.size_ > 0) {
        -:   50:			std::copy(ano_table.array_, ano_table.array_ + size_, array_);
        -:   51:		}
        -:   52:
        -:   53:		return *this;
        -:   54:	}
        -:   55:
        -:   56:	SeqTable(SeqTable&& ano_table) noexcept :
        -:   57:		size_{ano_table.size_},
        -:   58:		capacity_{ano_table.capacity_},
        -:   59:		array_{ano_table.array_} {
        -:   60:			ano_table.size_ = 0;
        -:   61:			ano_table.capacity_ = 0;
        -:   62:			ano_table.array_ = nullptr;
        -:   63:	}
        -:   64:
        -:   65:	SeqTable& operator=(SeqTable&& ano_table) noexcept {
        -:   66:		if (this == &ano_table)
        -:   67:			return *this;
        -:   68:
        -:   69:		delete[] array_;
        -:   70:
        -:   71:		size_ = ano_table.size_;
        -:   72:		capacity_ = ano_table.capacity_;
        -:   73:		array_ = ano_table.array_;
        -:   74:
        -:   75:		ano_table.size_ = 0;
        -:   76:		ano_table.capacity_ = 0;
        -:   77:		ano_table.array_ = nullptr;
        -:   78:
        -:   79:		return *this;
        -:   80:	}
        -:   81:
function _ZN2ds8SeqTableIiE6resizeERKm called 15 returned 100% blocks executed 79%
       15:   82:	void resize(const size_t& new_size) {
       15:   83:		if (new_size == 0) {
       15:   83-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 15
    #####:   84:			delete[] array_;
    %%%%%:   84-block 3
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   84-block 4
call    2 never executed
    #####:   85:			size_ = 0;
    #####:   86:			capacity_ = 0;
    #####:   87:			array_ = nullptr;
    #####:   88:			return;
    %%%%%:   88-block 5
        -:   89:		}
        -:   90:
      66*:   91:		auto *new_array = new ElemType[new_size]();
       15:   91-block 6
branch  0 taken 15 (fallthrough)
branch  1 taken 0
       15:   91-block 7
    %%%%%:   91-block 8
call    2 never executed
       15:   91-block 9
call    3 returned 15
       51:   91-block 11
       66:   91-block 12
branch  4 taken 51
branch  5 taken 15 (fallthrough)
       15:   92:		auto copy_size = std::min(size_, new_size);
       15:   92-block 13
call    0 returned 15
       15:   93:		std::copy(array_, array_ + copy_size, new_array);
call    0 returned 15
        -:   94:
       15:   95:		delete[] array_;
branch  0 taken 4 (fallthrough)
branch  1 taken 11
        4:   95-block 16
call    2 returned 4
        -:   96:
       15:   97:		if (new_size < size_)
       15:   97-block 17
branch  0 taken 1 (fallthrough)
branch  1 taken 14
        1:   98:			size_ = new_size;
        1:   98-block 18
        -:   99:
       15:  100:		capacity_ = new_size;
        -:  101:
       15:  102:		array_ = new_array;
       15:  102-block 19
        -:  103:	}
        -:  104:
function _ZN2ds8SeqTableIiE9push_backERKi called 28 returned 100% blocks executed 100%
       28:  105:	void push_back(const ElemType& elem) {
       28:  106:		if (size_ >= capacity_)
       28:  106-block 2
branch  0 taken 3 (fallthrough)
branch  1 taken 25
        3:  107:			resize(capacity_ == 0 ? 1 : capacity_ * 2);
        3:  107-block 3
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  107-block 4
        1:  107-block 5
        3:  107-block 6
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:  107-block 7
        -:  108:
       28:  109:		array_[size_] = elem;
       28:  110:		++size_;
       28:  111:	}
       28:  111-block 8
        -:  112:
        -:  113:	void insert(const size_t& pos, const ElemType& elem) {
        -:  114:		if (pos > size_)
        -:  115:			throw std::out_of_range("Index out of range");
        -:  116:
        -:  117:		if (size_ >= capacity_)
        -:  118:			resize(capacity_ == 0 ? 1 : capacity_ * 2);
        -:  119:
        -:  120:		std::move(array_ + pos, array_ + size_, array_ + pos + 1);
        -:  121:
        -:  122:		array_[pos] = elem;
        -:  123:		++size_;
        -:  124:	}
        -:  125:
function _ZN2ds8SeqTableIiE8pop_backEv called 26 returned 100% blocks executed 100%
       26:  126:	void pop_back() {
       26:  127:		if (size_ > 0)
       26:  127-block 2
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:  128:			--size_;
       26:  128-block 3
       26:  129:	}
        -:  130:
        -:  131:	void erase(const size_t& pos) {
        -:  132:		if (pos >= size_)
        -:  133:			throw std::out_of_range("Index out of range");
        -:  134:
        -:  135:		std::move(array_ + pos + 1, array_ + size_, array_ + pos);
        -:  136:
        -:  137:		--size_;
        -:  138:	}
        -:  139:
        -:  140:
        -:  141:	const ElemType& at(const size_t& pos) const {
        -:  142:		if (pos >= size_)
        -:  143:			throw std::out_of_range("Index out of range");
        -:  144:
        -:  145:		return array_[pos];
        -:  146:	}
        -:  147:
        -:  148:	ElemType& operator[](const size_t& pos) {
        -:  149:		if (pos >= size_)
        -:  150:			throw std::out_of_range("Index out of range");
        -:  151:
        -:  152:		return array_[pos];
        -:  153:	}
        -:  154:
        -:  155:	const ElemType& front() const {
        -:  156:		return array_[0];
        -:  157:	}
        -:  158:
function _ZNK2ds8SeqTableIiE4backEv called 28 returned 100% blocks executed 100%
       28:  159:	const ElemType& back() const {
       28:  160:		return array_[size_ - 1];
       28:  160-block 2
        -:  161:	}
        -:  162:
function _ZNK2ds8SeqTableIiE5emptyEv called 15 returned 100% blocks executed 100%
       15:  163:	[[nodiscard]] bool            empty()    const { return size_ == 0; }
       15:  163-block 2
        -:  164:
function _ZNK2ds8SeqTableIiE4sizeEv called 43 returned 100% blocks executed 100%
       43:  165:	[[nodiscard]] size_t          size()     const { return size_; }
       43:  165-block 2
        -:  166:	[[nodiscard]] size_t          capacity() const { return capacity_; }
        -:  167:
        -:  168:	[[nodiscard]] ElemType*       begin()    const { return array_; }
        -:  169:	[[nodiscard]] const ElemType* cbegin()   const { return array_; }
        -:  170:
        -:  171:	[[nodiscard]] ElemType*       end()      const { return array_ + size_; }
        -:  172:	[[nodiscard]] const ElemType* cend()     const { return array_ + size_; }
        -:  173:
        -:  174:	void print() const {
        -:  175:		for (size_t i = 0; i < size_; ++i) {
        -:  176:			std::cout << array_[i] << " ";
        -:  177:		}
        -:  178:		std::cout << std::endl;
        -:  179:	}
        -:  180:};
        -:  181:
        -:  182:}
