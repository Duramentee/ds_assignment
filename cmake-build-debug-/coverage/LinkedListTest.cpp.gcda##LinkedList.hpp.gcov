        -:    0:Source:/home/drowlia/code_save/ds/LinkedList/LinkedList.hpp
        -:    0:Graph:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/LinkedList/LinkedListTest.cpp.gcno
        -:    0:Data:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/LinkedList/LinkedListTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <iostream>
        -:    4:
        -:    5:namespace ds {
        -:    6:
        -:    7:template <typename ElemType>
        -:    8:struct Node {
        -:    9:    ElemType data_;
        -:   10:    Node* next_;
        -:   11:    Node* prev_;
        -:   12:
function _ZN2ds4NodeIiEC2ERKi called 41 returned 100% blocks executed 100%
       41:   13:    explicit Node(const ElemType& val) : data_{val}, next_{nullptr}, prev_{nullptr} {
       41:   14:    }
        -:   15:
function _ZN2ds4NodeIiED2Ev called 41 returned 100% blocks executed 100%
       41:   16:    ~Node() {
       41:   17:        next_ = nullptr;
       41:   18:        prev_ = nullptr;
       41:   19:    }
        -:   20:
        -:   21:    Node(const Node& ano_node) : data_{ano_node.data_}, next_{nullptr}, prev_{nullptr} {
        -:   22:    }
        -:   23:};
        -:   24:
        -:   25:template <typename ElemType>
        -:   26:struct LinkedList {
        -:   27:
        -:   28:struct Iterator {
        -:   29:    Node<ElemType>* node_;
        -:   30:
function _ZN2ds10LinkedListIiE8IteratorC2EPNS_4NodeIiEE called 26 returned 100% blocks executed 100%
       26:   31:    explicit Iterator(Node<ElemType>* node = nullptr) : node_{node} {}
        -:   32:
function _ZN2ds10LinkedListIiE8IteratorppEv called 10 returned 100% blocks executed 100%
       10:   33:    Iterator& operator++() {
       10:   34:        if (node_ != nullptr) {
       10:   34-block 2
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:   35:            node_ = node_->next_;
       10:   35-block 3
        -:   36:        }
       10:   37:        return *this;
       10:   37-block 4
        -:   38:    }
        -:   39:    Iterator operator++(int) {
        -:   40:        Iterator temp = *this;
        -:   41:        ++(*this);
        -:   42:        return temp;
        -:   43:    }
        -:   44:
        -:   45:    Iterator& operator--() {
        -:   46:        if (node_ != nullptr) {
        -:   47:            node_ = node_->prev_;
        -:   48:        }
        -:   49:        return *this;
        -:   50:    }
        -:   51:    Iterator operator--(int) {
        -:   52:        Iterator temp = *this;
        -:   53:        --(*this);
        -:   54:        return temp;
        -:   55:    }
        -:   56:
        -:   57:    Iterator& operator+=(const size_t n) {
        -:   58:        for (size_t i = 0; i < n && node_ != nullptr; ++i) {
        -:   59:            node_ = node_->next_;
        -:   60:        }
        -:   61:        return *this;
        -:   62:    }
        -:   63:    Iterator& operator-=(const size_t n) {
        -:   64:        for (size_t i = 0; i < n && node_ != nullptr; ++i) {
        -:   65:            node_ = node_->prev_;
        -:   66:        }
        -:   67:        return *this;
        -:   68:    }
        -:   69:
function _ZN2ds10LinkedListIiE8IteratordeEv called 24 returned 100% blocks executed 100%
       24:   70:    ElemType& operator*() {
       24:   71:        return node_->data_;
       24:   71-block 2
        -:   72:    }
        -:   73:    const ElemType& operator*() const {
        -:   74:        return node_->data_;
        -:   75:    }
        -:   76:
        -:   77:    ElemType* operator->() {
        -:   78:        return &(node_->data_);
        -:   79:    }
        -:   80:    const ElemType* operator->() const {
        -:   81:        return &(node_->data_);
        -:   82:    }
        -:   83:
        -:   84:    bool operator==(const Iterator& other) const {
        -:   85:        return node_ == other.node_;
        -:   86:    }
        -:   87:    bool operator!=(const Iterator& other) const {
        -:   88:        return node_ != other.node_;
        -:   89:    }
        -:   90:
        -:   91:};
        -:   92:
        -:   93:    Node<ElemType>* head_;
        -:   94:    Node<ElemType>* tail_;
        -:   95:
function _ZN2ds10LinkedListIiEC2Ev called 12 returned 100% blocks executed 100%
       12:   96:    LinkedList() : head_{nullptr}, tail_{nullptr} {}
        -:   97:
function _ZN2ds10LinkedListIiEC2Ei called 1 returned 100% blocks executed 100%
        1:   98:    explicit LinkedList(ElemType val) : head_{new Node<ElemType>(val)}, tail_{head_} {}
        1:   98-block 2
call    0 returned 1
call    1 returned 1
        -:   99:
function _ZN2ds10LinkedListIiED2Ev called 14 returned 100% blocks executed 100%
       14:  100:    ~LinkedList() { clear(); }
       14:  100-block 2
call    0 returned 14
        -:  101:
function _ZN2ds10LinkedListIiEC2ERKS1_ called 1 returned 100% blocks executed 100%
        1:  102:    LinkedList(const LinkedList& ano_list) : head_{nullptr}, tail_{nullptr} {
        1:  103:        if (ano_list.head_ != nullptr) {
        1:  103-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  104:            head_ = new Node<ElemType>(ano_list.head_->data_);
        1:  104-block 3
call    0 returned 1
call    1 returned 1
        1:  105:            tail_ = head_;
        1:  106:            Node<ElemType>* this_current = head_;
        1:  107:            Node<ElemType>* ano_current = ano_list.head_->next_;
        -:  108:
        2:  109:            while (ano_current != nullptr) {
        2:  109-block 9
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:  110:                this_current->next_ = new Node<ElemType>(ano_current->data_);
        1:  110-block 6
call    0 returned 1
call    1 returned 1
        1:  111:                this_current->next_->prev_ = this_current;
        1:  112:                this_current = this_current->next_;
        1:  113:                tail_ = this_current;
        1:  114:                ano_current = ano_current->next_;
        -:  115:            }
        -:  116:        }
        1:  117:    }
        -:  118:
function _ZN2ds10LinkedListIiEaSERKS1_ called 1 returned 100% blocks executed 92%
        1:  119:    LinkedList& operator=(const LinkedList& ano_list) {
        1:  120:        if (this != &ano_list) {
        1:  120-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  121:            clear();
        1:  121-block 3
call    0 returned 1
        -:  122:
        1:  123:            if (ano_list.head_ != nullptr) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  124:                head_ = new Node<ElemType>(ano_list.head_->data_);
        1:  124-block 5
call    0 returned 1
call    1 returned 1
        1:  125:                tail_ = head_;
        1:  126:                Node<ElemType>* this_current = head_;
        1:  127:                Node<ElemType>* ano_current = ano_list.head_->next_;
        -:  128:
        2:  129:                while (ano_current != nullptr) {
        2:  129-block 11
branch  0 taken 1
branch  1 taken 1
        1:  130:                    this_current->next_ = new Node<ElemType>(ano_current->data_);
        1:  130-block 8
call    0 returned 1
call    1 returned 1
        1:  131:                    this_current->next_->prev_ = this_current;
        1:  132:                    this_current = this_current->next_;
        1:  133:                    tail_ = this_current;
        1:  134:                    ano_current = ano_current->next_;
        -:  135:                }
        -:  136:            }
        -:  137:            else {
    #####:  138:                head_ = nullptr;
    #####:  139:                tail_ = nullptr;
    %%%%%:  139-block 12
        -:  140:            }
        -:  141:        }
        1:  142:        return *this;
        1:  142-block 13
        -:  143:    }
        -:  144:
        -:  145:
function _ZN2ds10LinkedListIiE5clearEv called 16 returned 100% blocks executed 100%
       16:  146:    void clear() {
       16:  147:        Node<ElemType>* current = head_;
       39:  148:        while (current != nullptr) {
       16:  148-block 2
       39:  148-block 7
branch  0 taken 23
branch  1 taken 16 (fallthrough)
       23:  149:            Node<ElemType>* next = current->next_;
       23:  150:            delete current;
       23:  150-block 3
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23:  150-block 4
call    2 returned 23
call    3 returned 23
       23:  151:            current = next;
       23:  151-block 6
        -:  152:        }
       16:  153:        head_ = nullptr;
       16:  154:        tail_ = nullptr;
       16:  155:    }
        -:  156:
function _ZN2ds10LinkedListIiE10push_frontERKi called 4 returned 100% blocks executed 100%
        4:  157:    void push_front(const ElemType& val) {
        4:  158:        Node<ElemType>* new_node = new Node(val);
        4:  158-block 2
call    0 returned 4
call    1 returned 4
        4:  159:        new_node->next_ = head_;
        4:  160:        if (head_ != nullptr) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  161:            head_->prev_ = new_node;
        2:  161-block 5
        -:  162:        }
        4:  163:        head_ = new_node;
        4:  164:        if (tail_ == nullptr) {
        4:  164-block 6
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  165:            tail_ = new_node;
        2:  165-block 7
        -:  166:        }
        4:  167:    }
        -:  168:
function _ZN2ds10LinkedListIiE9push_backERKi called 18 returned 100% blocks executed 100%
       18:  169:    void push_back(const ElemType& val) {
       18:  170:        Node<ElemType>* new_node = new Node(val);
       18:  170-block 2
call    0 returned 18
call    1 returned 18
       18:  171:        if (tail_ != nullptr) {
branch  0 taken 10 (fallthrough)
branch  1 taken 8
       10:  172:            tail_->next_ = new_node;
       10:  173:            new_node->prev_ = tail_;
       10:  173-block 5
        -:  174:        }
       18:  175:        tail_ = new_node;
       18:  176:        if (head_ == nullptr) {
       18:  176-block 6
branch  0 taken 8 (fallthrough)
branch  1 taken 10
        8:  177:            head_ = new_node;
        8:  177-block 7
        -:  178:        }
       18:  179:    }
        -:  180:
function _ZN2ds10LinkedListIiE6insertENS1_8IteratorERKi called 1 returned 100% blocks executed 64%
        1:  181:    Iterator insert(Iterator pos, const ElemType& val) {
        1:  182:        Node<ElemType>* new_node = new Node(val);
        1:  182-block 2
call    0 returned 1
call    1 returned 1
        1:  183:        Node<ElemType>* current = pos.node_;
        -:  184:
        1:  185:        if (current == nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  186:            push_back(val);
    %%%%%:  186-block 5
call    0 never executed
    #####:  187:            return Iterator(tail_);
call    0 never executed
    %%%%%:  187-block 8
        -:  188:        }
        -:  189:
        1:  190:        new_node->next_ = current;
        1:  191:        new_node->prev_ = current->prev_;
        -:  192:
        1:  193:        if (current->prev_ != nullptr) {
        1:  193-block 9
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  194:            current->prev_->next_ = new_node;
        1:  194-block 10
        -:  195:        }
        -:  196:        else {
    #####:  197:            head_ = new_node;
    %%%%%:  197-block 11
        -:  198:        }
        -:  199:
        1:  200:        current->prev_ = new_node;
        -:  201:
        1:  202:        return Iterator(new_node);
        1:  202-block 12
call    0 returned 1
        1:  202-block 14
        -:  203:    }
        -:  204:
function _ZN2ds10LinkedListIiE9pop_frontEv called 2 returned 100% blocks executed 89%
        2:  205:    void pop_front() {
        2:  206:        if (head_ == nullptr)
        2:  206-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  207:            return;
    %%%%%:  207-block 3
        -:  208:
        2:  209:        Node<ElemType>* old_head = head_;
        2:  210:        head_ = head_->next_;
        -:  211:
        2:  212:        if (head_ != nullptr) {
        2:  212-block 4
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  213:            head_->prev_ = nullptr;
        1:  213-block 5
        -:  214:        } else {
        1:  215:            tail_ = nullptr;
        1:  215-block 6
        -:  216:        }
        -:  217:
        2:  218:        delete old_head;
        2:  218-block 7
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  218-block 8
call    2 returned 2
call    3 returned 2
        -:  219:    }
        -:  220:
function _ZN2ds10LinkedListIiE8pop_backEv called 2 returned 100% blocks executed 91%
        2:  221:    void pop_back() {
        2:  222:        if (head_ == nullptr)
        2:  222-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  223:            return;
    %%%%%:  223-block 3
        2:  224:        if (head_->next_ == nullptr) {
        2:  224-block 4
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  225:            delete head_;
        1:  225-block 5
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  225-block 6
call    2 returned 1
call    3 returned 1
        1:  226:            head_ = nullptr;
        1:  227:            tail_ = nullptr;
        1:  228:            return;
        1:  228-block 8
        -:  229:        }
        -:  230:
        1:  231:        Node<ElemType>* current = tail_;
        1:  232:        tail_ = tail_->prev_;
        1:  233:        tail_->next_ = nullptr;
        -:  234:
        1:  235:        delete current;
        1:  235-block 9
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  235-block 10
call    2 returned 1
call    3 returned 1
        -:  236:    }
        -:  237:
function _ZN2ds10LinkedListIiE5eraseENS1_8IteratorE called 1 returned 100% blocks executed 80%
        1:  238:    Iterator erase(Iterator pos) {
        1:  239:        Node<ElemType>* current = pos.node_;
        1:  240:        if (current == nullptr) {
        1:  240-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  241:            return end();
    %%%%%:  241-block 3
call    0 never executed
        -:  242:        }
        -:  243:
        1:  244:        Node<ElemType>* next = current->next_;
        1:  245:        Node<ElemType>* prev = current->prev_;
        -:  246:
        1:  247:        if (prev != nullptr) {
        1:  247-block 4
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  248:            prev->next_ = next;
        1:  248-block 5
        -:  249:        }
        -:  250:        else {
    #####:  251:            head_ = next;
    %%%%%:  251-block 6
        -:  252:        }
        -:  253:
        1:  254:        if (next != nullptr) {
        1:  254-block 7
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  255:            next->prev_ = prev;
        1:  255-block 8
        -:  256:        }
        -:  257:        else {
    #####:  258:            tail_ = prev;
    %%%%%:  258-block 9
        -:  259:        }
        -:  260:
        1:  261:        delete current;
        1:  261-block 10
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  261-block 11
call    2 returned 1
call    3 returned 1
        -:  262:
        1:  263:        return Iterator(next);
        1:  263-block 13
call    0 returned 1
        1:  263-block 15
        -:  264:    }
        -:  265:
function _ZNK2ds10LinkedListIiE4findERKi called 2 returned 100% blocks executed 100%
        2:  266:    [[nodiscard]] bool find(const ElemType& val) const {
        2:  267:        Node<ElemType>* current = head_;
        6:  268:        while (current != nullptr) {
        2:  268-block 2
        6:  268-block 6
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  269:            if (current->data_ == val)
        5:  269-block 3
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  270:                return true;
        1:  270-block 4
        4:  271:            current = current->next_;
        4:  271-block 5
        -:  272:        }
        -:  273:
        1:  274:        return false;
        1:  274-block 7
        -:  275:    }
        -:  276:
        -:  277:    void print() const {
        -:  278:        Node<ElemType>* current = head_;
        -:  279:        while (current != nullptr) {
        -:  280:            std::cout << current->data_ << " ";
        -:  281:            current = current->next_;
        -:  282:        }
        -:  283:        std::cout << std::endl;
        -:  284:    }
        -:  285:
function _ZNK2ds10LinkedListIiE5emptyEv called 5 returned 100% blocks executed 100%
        5:  286:    [[nodiscard]] bool empty()  const { return head_ == nullptr; }
        5:  286-block 2
function _ZN2ds10LinkedListIiE5beginEv called 24 returned 100% blocks executed 100%
       24:  287:    Iterator           begin()        { return Iterator(head_); }
       24:  287-block 2
call    0 returned 24
       24:  287-block 4
function _ZN2ds10LinkedListIiE3endEv called 0 returned 0% blocks executed 0%
    #####:  288:    Iterator           end()          { return Iterator(nullptr); }
    %%%%%:  288-block 2
call    0 never executed
    %%%%%:  288-block 4
        -:  289:    Iterator           begin()  const { return Iterator(head_); }
        -:  290:    Iterator           end()    const { return Iterator(nullptr); }
        -:  291:};
        -:  292:
        -:  293:}
