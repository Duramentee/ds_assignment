        -:    0:Source:/home/drowlia/code_save/ds/LinkedList/LinkedList.hpp
        -:    0:Graph:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/LinkedList/LinkedListTest.cpp.gcno
        -:    0:Data:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/LinkedList/LinkedListTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <iostream>
        -:    4:
        -:    5:namespace ds {
        -:    6:template <typename ElemType>
        -:    7:struct Node {
        -:    8:    ElemType data_;
        -:    9:    Node* next_;
        -:   10:
function _ZN2ds4NodeIiEC2ERKi called 39 returned 100% blocks executed 100%
       39:   11:    explicit Node(const ElemType& val) : data_{val}, next_{nullptr} {
       39:   12:    }
        -:   13:
function _ZN2ds4NodeIiED2Ev called 39 returned 100% blocks executed 100%
       39:   14:    ~Node() {
       39:   15:        next_ = nullptr;
       39:   16:    }
        -:   17:
        -:   18:    Node(const Node& ano_node) : data_{ano_node.data_}, next_{nullptr} {
        -:   19:    }
        -:   20:};
        -:   21:
        -:   22:template <typename ElemType>
        -:   23:struct LinkedList {
        -:   24:    Node<ElemType>* head_;
        -:   25:
function _ZN2ds10LinkedListIiEC2Ev called 13 returned 100% blocks executed 100%
       13:   26:    LinkedList() : head_{nullptr} {
       13:   27:    }
        -:   28:
function _ZN2ds10LinkedListIiEC2Ei called 1 returned 100% blocks executed 100%
        1:   29:    explicit LinkedList(ElemType val) : head_{new Node<ElemType>(val)} {
        1:   29-block 2
call    0 returned 1
call    1 returned 1
        1:   30:    }
        -:   31:
function _ZN2ds10LinkedListIiED2Ev called 15 returned 100% blocks executed 100%
       15:   32:    ~LinkedList() { clear(); }
       15:   32-block 2
call    0 returned 15
        -:   33:
function _ZN2ds10LinkedListIiEC2ERKS1_ called 1 returned 100% blocks executed 100%
        1:   34:    LinkedList(const LinkedList& ano_list) : head_{nullptr} {
        1:   35:        if (ano_list.head_ != nullptr) {
        1:   35-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   36:            head_ = ::new Node<ElemType>(ano_list.head_->data_);
        1:   36-block 3
call    0 returned 1
call    1 returned 1
        1:   37:            Node<ElemType>* this_current = head_;
        1:   38:            Node<ElemType>* ano_current = ano_list.head_->next_;
        -:   39:
        2:   40:            while (ano_current != nullptr) {
        2:   40-block 9
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   41:                this_current->next_ = ::new Node<ElemType>(ano_current->data_);
        1:   41-block 6
call    0 returned 1
call    1 returned 1
        1:   42:                this_current = this_current->next_;
        1:   43:                ano_current = ano_current->next_;
        -:   44:            }
        -:   45:        }
        1:   46:    }
        -:   47:
function _ZN2ds10LinkedListIiEaSERKS1_ called 1 returned 100% blocks executed 92%
        1:   48:    LinkedList& operator=(const LinkedList& ano_list) {
        1:   49:        if (this != &ano_list) {
        1:   49-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   50:            clear();
        1:   50-block 3
call    0 returned 1
        -:   51:
        1:   52:            if (ano_list.head_ != nullptr) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   53:                head_ = ::new Node<ElemType>(ano_list.head_->data_);
        1:   53-block 5
call    0 returned 1
call    1 returned 1
        1:   54:                Node<ElemType>* this_current = head_;
        1:   55:                Node<ElemType>* ano_current = ano_list.head_->next_;
        -:   56:
        2:   57:                while (ano_current != nullptr) {
        2:   57-block 11
branch  0 taken 1
branch  1 taken 1
        1:   58:                    this_current->next_ = ::new Node<ElemType>(ano_current->data_);
        1:   58-block 8
call    0 returned 1
call    1 returned 1
        1:   59:                    this_current = this_current->next_;
        1:   60:                    ano_current = ano_current->next_;
        -:   61:                }
        -:   62:            }
        -:   63:            else {
    #####:   64:                head_ = nullptr;
    %%%%%:   64-block 12
        -:   65:            }
        -:   66:        }
        1:   67:        return *this;
        1:   67-block 13
        -:   68:    }
        -:   69:
        -:   70:
function _ZN2ds10LinkedListIiE5clearEv called 17 returned 100% blocks executed 100%
       17:   71:    void clear() {
       17:   72:        Node<ElemType>* current = head_;
       40:   73:        while (current != nullptr) {
       17:   73-block 2
       40:   73-block 7
branch  0 taken 23
branch  1 taken 17 (fallthrough)
       23:   74:            Node<ElemType>* next = current->next_;
       23:   75:            delete current;
       23:   75-block 3
branch  0 taken 23 (fallthrough)
branch  1 taken 0
       23:   75-block 4
call    2 returned 23
call    3 returned 23
       23:   76:            current = next;
       23:   76-block 6
        -:   77:        }
       17:   78:        head_ = nullptr;
       17:   79:    }
        -:   80:
function _ZN2ds10LinkedListIiE10push_frontERKi called 2 returned 100% blocks executed 100%
        2:   81:    void push_front(const ElemType& val) {
        2:   82:        Node<ElemType>* new_node = new Node(val);
        2:   82-block 2
call    0 returned 2
call    1 returned 2
        2:   83:        new_node->next_ = head_;
        2:   84:        head_ = new_node;
        2:   85:    }
        -:   86:
function _ZN2ds10LinkedListIiE9push_backERKi called 16 returned 100% blocks executed 89%
       16:   87:    void push_back(const ElemType& val) {
       16:   88:        Node<ElemType>* new_node = new Node(val);
       16:   88-block 2
call    0 returned 16
call    1 returned 16
       16:   89:        Node<ElemType>* current = head_;
        -:   90:
       16:   91:        if (head_ == nullptr) {
branch  0 taken 10 (fallthrough)
branch  1 taken 6
       10:   92:            head_ = new_node;
       10:   93:            return;
       10:   93-block 5
        -:   94:        }
        -:   95:
        6:   96:        while (current->next_ != nullptr) {
        6:   96-block 6
        6:   96-block 8
branch  0 taken 0
branch  1 taken 6 (fallthrough)
    #####:   97:            current = current->next_;
    %%%%%:   97-block 7
        -:   98:        }
        -:   99:
        6:  100:        current->next_ = new_node;
        6:  100-block 9
        -:  101:    }
        -:  102:
function _ZN2ds10LinkedListIiE6insertERKiS3_ called 3 returned 100% blocks executed 78%
        3:  103:    void insert(const int& pos, const ElemType& val) {
        3:  104:        if (pos < 0)
        3:  104-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  105:            return;
    %%%%%:  105-block 3
        -:  106:
        3:  107:        Node<ElemType>* new_node = new Node(val);
        3:  107-block 4
call    0 returned 3
call    1 returned 3
        -:  108:
        3:  109:        if (pos == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  110:            new_node->next_ = head_;
        1:  111:            head_ = new_node;
        1:  112:            return;
        1:  112-block 7
        -:  113:        }
        -:  114:
        2:  115:        Node<ElemType>* current = head_;
        2:  116:        Node<ElemType>* prev = nullptr;
        2:  117:        int index = 0;
        -:  118:
        5:  119:        while (current != nullptr && index < pos) {
        2:  119-block 8
        5:  119-block 10
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:  119-block 11
branch  2 taken 3
branch  3 taken 1 (fallthrough)
        3:  120:            prev = current;
        3:  121:            current = current->next_;
        3:  122:            index++;
        3:  122-block 9
        -:  123:        }
        -:  124:
        2:  125:        if (prev != nullptr) {
        2:  125-block 12
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  126:            prev->next_ = new_node;
        2:  127:            new_node->next_ = current;
        2:  127-block 13
        -:  128:        }
        -:  129:
        2:  130:        if (current == nullptr && index != pos) {
        2:  130-block 14
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  130-block 15
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  131:            delete new_node;
    %%%%%:  131-block 16
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  131-block 17
call    2 never executed
call    3 never executed
        -:  132:        }
        -:  133:    }
        -:  134:
function _ZN2ds10LinkedListIiE9pop_frontEv called 2 returned 100% blocks executed 83%
        2:  135:    void pop_front() {
        2:  136:        if (head_ == nullptr)
        2:  136-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  137:            return;
    %%%%%:  137-block 3
        -:  138:
        2:  139:        Node<ElemType>* old_head = head_;
        2:  140:        head_ = head_->next_;
        -:  141:
        2:  142:        delete old_head;
        2:  142-block 4
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  142-block 5
call    2 returned 2
call    3 returned 2
        -:  143:    }
        -:  144:
function _ZN2ds10LinkedListIiE8pop_backEv called 1 returned 100% blocks executed 67%
        1:  145:    void pop_back() {
        1:  146:        if (head_ == nullptr)
        1:  146-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  147:            return;
    %%%%%:  147-block 3
        1:  148:        if (head_->next_ == nullptr) {
        1:  148-block 4
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  149:            delete head_;
    %%%%%:  149-block 5
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  149-block 6
call    2 never executed
call    3 never executed
    #####:  150:            head_ = nullptr;
    #####:  151:            return;
    %%%%%:  151-block 8
        -:  152:        }
        -:  153:
        1:  154:        Node<ElemType>* current = head_;
        1:  155:        Node<ElemType>* prev = nullptr;
        -:  156:
        2:  157:        while (current->next_ != nullptr) {
        1:  157-block 9
        2:  157-block 11
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:  158:            prev = current;
        1:  159:            current = current->next_;
        1:  159-block 10
        -:  160:        }
        -:  161:
        1:  162:        delete current;
        1:  162-block 12
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  162-block 13
call    2 returned 1
call    3 returned 1
        1:  163:        prev->next_ = nullptr;
        1:  163-block 15
        -:  164:    }
        -:  165:
function _ZN2ds10LinkedListIiE5eraseERKi called 1 returned 100% blocks executed 36%
        1:  166:    void erase(const int& pos) {
        1:  167:        if (head_ == nullptr)
        1:  167-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  168:            return;
    %%%%%:  168-block 3
        1:  169:        if (pos == 0) {
        1:  169-block 4
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  170:            pop_front();
        1:  170-block 5
call    0 returned 1
        1:  171:            return;
        -:  172:        }
        -:  173:
    #####:  174:        Node<ElemType>* current = head_;
    #####:  175:        Node<ElemType>* prev = nullptr;
    #####:  176:        int index = 0;
        -:  177:
    #####:  178:        while (current != nullptr && index < pos) {
    %%%%%:  178-block 7
    %%%%%:  178-block 9
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  178-block 10
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  179:            prev = current;
    #####:  180:            current = current->next_;
    #####:  181:            ++index;
    %%%%%:  181-block 8
        -:  182:        }
        -:  183:
    #####:  184:        if (current != nullptr) {
    %%%%%:  184-block 11
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  185:            prev->next_ = current->next_;
    #####:  186:            delete current;
    %%%%%:  186-block 12
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  186-block 13
call    2 never executed
call    3 never executed
        -:  187:        }
        -:  188:    }
        -:  189:
function _ZNK2ds10LinkedListIiE4findERKi called 20 returned 100% blocks executed 100%
       20:  190:    [[nodiscard]] bool find(const ElemType& val) const {
       20:  191:        Node<ElemType>* current = head_;
       32:  192:        while (current != nullptr) {
       20:  192-block 2
       32:  192-block 6
branch  0 taken 28
branch  1 taken 4 (fallthrough)
       28:  193:            if (current->data_ == val)
       28:  193-block 3
branch  0 taken 16 (fallthrough)
branch  1 taken 12
       16:  194:                return true;
       16:  194-block 4
       12:  195:            current = current->next_;
       12:  195-block 5
        -:  196:        }
        -:  197:
        4:  198:        return false;
        4:  198-block 7
        -:  199:    }
        -:  200:
function _ZNK2ds10LinkedListIiE5emptyEv called 7 returned 100% blocks executed 100%
        7:  201:    [[nodiscard]] bool empty() const { return head_ == nullptr; }
        7:  201-block 2
        -:  202:
        -:  203:    void print() const {
        -:  204:        Node<ElemType>* current = head_;
        -:  205:        while (current != nullptr) {
        -:  206:            std::cout << current->data_ << " ";
        -:  207:            current = current->next_;
        -:  208:        }
        -:  209:        std::cout << std::endl;
        -:  210:    }
        -:  211:};
        -:  212:}
