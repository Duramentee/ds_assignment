        -:    0:Source:/home/drowlia/code_save/ds/Tree/BinaryTree.hpp
        -:    0:Graph:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/Tree/BinaryTreeTest.cpp.gcno
        -:    0:Data:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/Tree/BinaryTreeTest.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by lsx31 on 24-12-9.
        -:    3://
        -:    4:
        -:    5:#pragma once
        -:    6:
        -:    7:#include <iostream>
        -:    8:#include <stdexcept>
        -:    9:
        -:   10:#include "../Queue/Queue.hpp"
        -:   11:
        -:   12:namespace ds {
        -:   13:
        -:   14:template <typename ElemType>
        -:   15:struct BinaryTreeNode {
        -:   16:	ElemType data_;
        -:   17:	BinaryTreeNode* left_;
        -:   18:	BinaryTreeNode* right_;
        -:   19:
function _ZN2ds14BinaryTreeNodeIiEC2ERKi called 110 returned 100% blocks executed 100%
      110:   20:	explicit BinaryTreeNode(const ElemType& value) : data_{value}, left_{nullptr}, right_{nullptr} {}
        -:   21:};
        -:   22:
        -:   23:template <typename ElemType>
        -:   24:struct BinaryTree {
        -:   25:private:
        -:   26:	BinaryTreeNode<ElemType>* root_;
        -:   27:
function _ZN2ds10BinaryTreeIiE12destroy_treeEPNS_14BinaryTreeNodeIiEE called 239 returned 100% blocks executed 100%
      239:   28:	void destroy_tree(BinaryTreeNode<ElemType>* node) {
      239:   29:		if (node != nullptr) {
      239:   29-block 2
branch  0 taken 110 (fallthrough)
branch  1 taken 129
      110:   30:			destroy_tree(node->left_);
      110:   30-block 3
call    0 returned 110
      110:   31:			destroy_tree(node->right_);
call    0 returned 110
      110:   32:			delete node;
branch  0 taken 110 (fallthrough)
branch  1 taken 0
      110:   32-block 6
call    2 returned 110
        -:   33:		}
      239:   34:	}
        -:   35:
function _ZN2ds10BinaryTreeIiE11insert_utilERPNS_14BinaryTreeNodeIiEERKi called 284 returned 100% blocks executed 100%
      284:   36:	void insert_util(BinaryTreeNode<ElemType>*& node, const ElemType& value) {
      284:   37:		if (node == nullptr) {
      284:   37-block 2
branch  0 taken 110 (fallthrough)
branch  1 taken 174
      110:   38:			node = new BinaryTreeNode<ElemType>(value);
      110:   38-block 3
call    0 returned 110
call    1 returned 110
      174:   39:		} else if (value < node->data_) {
      174:   39-block 6
branch  0 taken 87 (fallthrough)
branch  1 taken 87
       87:   40:			insert_util(node->left_, value);
       87:   40-block 7
call    0 returned 87
        -:   41:		} else {
       87:   42:			insert_util(node->right_, value);
       87:   42-block 8
call    0 returned 87
        -:   43:		}
      284:   44:	}
        -:   45:
function _ZN2ds10BinaryTreeIiE5visitEPNS_14BinaryTreeNodeIiEE called 21 returned 100% blocks executed 100%
       21:   46:	static void visit(BinaryTreeNode<ElemType>* node) {
       21:   47:		std::cout << node->data_ << " ";
       21:   47-block 2
call    0 returned 21
call    1 returned 21
       21:   48:	}
        -:   49:
function _ZNK2ds10BinaryTreeIiE14pre_order_utilEPNS_14BinaryTreeNodeIiEE called 15 returned 100% blocks executed 100%
       15:   50:	void pre_order_util(BinaryTreeNode<ElemType>* node) const {
       15:   51:		if (node != nullptr) {
       15:   51-block 2
branch  0 taken 7 (fallthrough)
branch  1 taken 8
        7:   52:			visit(node);
        7:   52-block 3
call    0 returned 7
        7:   53:			pre_order_util(node->left_);
call    0 returned 7
        7:   54:			pre_order_util(node->right_);
call    0 returned 7
        -:   55:		}
       15:   56:	}
function _ZNK2ds10BinaryTreeIiE13in_order_utilEPNS_14BinaryTreeNodeIiEE called 15 returned 100% blocks executed 100%
       15:   57:	void in_order_util(BinaryTreeNode<ElemType>* node) const {
       15:   58:		if (node != nullptr) {
       15:   58-block 2
branch  0 taken 7 (fallthrough)
branch  1 taken 8
        7:   59:			in_order_util(node->left_);
        7:   59-block 3
call    0 returned 7
        7:   60:			visit(node);
call    0 returned 7
        7:   61:			in_order_util(node->right_);
call    0 returned 7
        -:   62:		}
       15:   63:	}
function _ZNK2ds10BinaryTreeIiE15post_order_utilEPNS_14BinaryTreeNodeIiEE called 15 returned 100% blocks executed 100%
       15:   64:	void post_order_util(BinaryTreeNode<ElemType>* node) const {
       15:   65:		if (node != nullptr) {
       15:   65-block 2
branch  0 taken 7 (fallthrough)
branch  1 taken 8
        7:   66:			post_order_util(node->left_);
        7:   66-block 3
call    0 returned 7
        7:   67:			post_order_util(node->right_);
call    0 returned 7
        7:   68:			visit(node);
call    0 returned 7
        -:   69:		}
       15:   70:	}
        -:   71:
function _ZNK2ds10BinaryTreeIiE11search_utilEPKNS_14BinaryTreeNodeIiEERKi called 29 returned 100% blocks executed 100%
       29:   72:	bool search_util(const BinaryTreeNode<ElemType>* node, const ElemType& value) const {
       29:   73:		if (node == nullptr)
       29:   73-block 2
branch  0 taken 3 (fallthrough)
branch  1 taken 26
        3:   74:			return false;
        3:   74-block 3
       26:   75:		if (value == node->data_) {
       26:   75-block 4
branch  0 taken 7 (fallthrough)
branch  1 taken 19
        7:   76:			return true;
        7:   76-block 5
       19:   77:		} else if (value < node->data_) {
       19:   77-block 6
branch  0 taken 9 (fallthrough)
branch  1 taken 10
        9:   78:			return search_util(node->left_, value);
        9:   78-block 7
call    0 returned 9
        -:   79:		} else {
       10:   80:			return search_util(node->right_, value);
       10:   80-block 9
call    0 returned 10
        -:   81:		}
        -:   82:	}
function _ZNK2ds10BinaryTreeIiE19find_max_value_utilEPKNS_14BinaryTreeNodeIiEE called 3 returned 100% blocks executed 100%
        3:   83:	ElemType find_max_value_util(const BinaryTreeNode<ElemType>* node) const {
        3:   84:		if (node->right_ == nullptr)
        3:   84-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   85:			return node->data_;
        1:   85-block 3
        2:   86:		return find_max_value_util(node->right_);
        2:   86-block 4
call    0 returned 2
        -:   87:	}
function _ZNK2ds10BinaryTreeIiE19find_min_value_utilEPKNS_14BinaryTreeNodeIiEE called 3 returned 100% blocks executed 100%
        3:   88:	ElemType find_min_value_util(const BinaryTreeNode<ElemType>* node) const {
        3:   89:		if (node->left_ == nullptr)
        3:   89-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   90:			return node->data_;
        1:   90-block 3
        2:   91:		return find_min_value_util(node->left_);
        2:   91-block 4
call    0 returned 2
        -:   92:	}
function _ZNK2ds10BinaryTreeIiE13find_max_utilEPNS_14BinaryTreeNodeIiEE called 6 returned 100% blocks executed 100%
        6:   93:	BinaryTreeNode<ElemType>* find_max_util(BinaryTreeNode<ElemType>* node) const {
        6:   94:		if (node->right_ == nullptr)
        6:   94-block 2
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:   95:			return node;
        2:   95-block 3
        4:   96:		return find_max_util(node->right_);
        4:   96-block 4
call    0 returned 4
        -:   97:	}
function _ZNK2ds10BinaryTreeIiE13find_min_utilEPNS_14BinaryTreeNodeIiEE called 3 returned 100% blocks executed 100%
        3:   98:	BinaryTreeNode<ElemType>* find_min_util(BinaryTreeNode<ElemType>* node) const {
        3:   99:		if (node->left_ == nullptr)
        3:   99-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  100:			return node;
        1:  100-block 3
        2:  101:		return find_min_util(node->left_);
        2:  101-block 4
call    0 returned 2
        -:  102:	}
        -:  103:
function _ZNK2ds10BinaryTreeIiE21calculate_height_utilEPNS_14BinaryTreeNodeIiEE called 50 returned 100% blocks executed 90%
       50:  104:	size_t calculate_height_util(BinaryTreeNode<ElemType>* node) const {
       50:  105:		if (node == nullptr) {
       50:  105-block 2
branch  0 taken 27 (fallthrough)
branch  1 taken 23
       27:  106:			return 0;
       27:  106-block 3
        -:  107:		} else {
       23:  108:			return std::max(calculate_height_util(node->left_), calculate_height_util(node->right_)) + 1;
       23:  108-block 4
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23:  108-block 5
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       23:  108-block 6
call    6 returned 23
       23:  108-block 8
    $$$$$:  108-block 10
        -:  109:		}
        -:  110:	}
        -:  111:
function _ZNK2ds10BinaryTreeIiE11is_bst_utilEPNS_14BinaryTreeNodeIiEERKiS6_ called 54 returned 100% blocks executed 100%
       54:  112:	bool is_bst_util(BinaryTreeNode<ElemType>* node, const ElemType& min, const ElemType& max) const {
       54:  113:		if (node == nullptr)
       54:  113-block 2
branch  0 taken 29 (fallthrough)
branch  1 taken 25
       29:  114:			return true;
       29:  114-block 3
        -:  115:
       25:  116:		if (node->data_ <= min || node->data_ >= max) {
       25:  116-block 4
branch  0 taken 24 (fallthrough)
branch  1 taken 1
       24:  116-block 5
branch  2 taken 0 (fallthrough)
branch  3 taken 24
        1:  117:			return false;
        1:  117-block 6
        -:  118:		}
        -:  119:
       48:  120:		return is_bst_util(node->left_, min, node->data_) &&
       24:  120-block 7
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0
       22:  120-block 11
        2:  120-block 12
       48:  121:			   is_bst_util(node->right_, node->data_, max);
       24:  121-block 9
call    0 returned 24
branch  1 taken 22 (fallthrough)
branch  2 taken 2
       24:  121-block 13
        -:  122:	}
        -:  123:
        -:  124:public:
function _ZN2ds10BinaryTreeIiEC2Ev called 19 returned 100% blocks executed 100%
       19:  125:	BinaryTree() : root_{nullptr} {}
        -:  126:
function _ZN2ds10BinaryTreeIiED2Ev called 19 returned 100% blocks executed 100%
       19:  127:	~BinaryTree() {
       19:  128:		destroy_tree(root_);
       19:  128-block 2
call    0 returned 19
       19:  129:	}
        -:  130:
function _ZN2ds10BinaryTreeIiE6insertERKi called 110 returned 100% blocks executed 100%
      110:  131:	void insert(const ElemType& value) {
      110:  132:		insert_util(root_, value);
      110:  132-block 2
call    0 returned 110
      110:  133:	}
        -:  134:
function _ZNK2ds10BinaryTreeIiE9pre_orderEv called 1 returned 100% blocks executed 100%
        1:  135:	void pre_order() const {
        1:  136:		pre_order_util(root_);
        1:  136-block 2
call    0 returned 1
        1:  137:		std::cout << std::endl;
call    0 returned 1
        1:  138:	}
        -:  139:
function _ZNK2ds10BinaryTreeIiE8in_orderEv called 1 returned 100% blocks executed 100%
        1:  140:	void in_order() const {
        1:  141:		in_order_util(root_);
        1:  141-block 2
call    0 returned 1
        1:  142:		std::cout << std::endl;
call    0 returned 1
        1:  143:	}
        -:  144:
function _ZNK2ds10BinaryTreeIiE10post_orderEv called 1 returned 100% blocks executed 100%
        1:  145:	void post_order() const {
        1:  146:		post_order_util(root_);
        1:  146-block 2
call    0 returned 1
        1:  147:		std::cout << std::endl;
call    0 returned 1
        1:  148:	}
        -:  149:
function _ZNK2ds10BinaryTreeIiE11level_orderEv called 1 returned 100% blocks executed 86%
        1:  150:	void level_order() const {
        1:  151:		if (root_ == nullptr)
        1:  151-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  152:			return;
    %%%%%:  152-block 3
        -:  153:
        1:  154:		ds::Queue<BinaryTreeNode<ElemType>*> q;
        1:  154-block 4
call    0 returned 1
        1:  155:		q.enqueue(root_);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  156:
        8:  157:		while (!q.is_empty()) {
        1:  157-block 6
        8:  157-block 15
call    0 returned 8
branch  1 taken 7
branch  2 taken 1 (fallthrough)
        7:  158:			BinaryTreeNode<ElemType>* current = q.peek();
        7:  158-block 7
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  159:			q.dequeue();
        7:  159-block 8
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -:  160:
        7:  161:			std::cout << current->data_ << " ";
        7:  161-block 9
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  161-block 10
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        -:  162:
        7:  163:			if (current->left_ != nullptr) {
        7:  163-block 11
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        3:  164:				q.enqueue(current->left_);
        3:  164-block 12
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  165:			}
        -:  166:
        7:  167:			if (current->right_ != nullptr) {
        7:  167-block 13
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        3:  168:				q.enqueue(current->right_);
        3:  168-block 14
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  169:			}
        -:  170:		}
        1:  171:		std::cout << std::endl;
        1:  171-block 17
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  172:	}
        1:  172-block 18
call    0 returned 1
    $$$$$:  172-block 21
call    1 never executed
        -:  173:
function _ZNK2ds10BinaryTreeIiE6searchERKi called 10 returned 100% blocks executed 100%
       10:  174:	bool search(const ElemType& value) const {
       10:  175:		return search_util(root_, value);
       10:  175-block 2
call    0 returned 10
        -:  176:	}
        -:  177:
function _ZNK2ds10BinaryTreeIiE14find_max_valueEv called 2 returned 50% blocks executed 89%
        2:  178:	ElemType find_max_value() const {
        2:  179:		if (root_ == nullptr)
        2:  179-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  180:			throw std::runtime_error("can't find on empty tree.");
        1:  180-block 3
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  180-block 5
call    4 returned 0
    $$$$$:  180-block 9
call    5 never executed
        -:  181:
        1:  182:		return find_max_value_util(root_);
        1:  182-block 6
call    0 returned 1
        1:  182-block 8
        -:  183:	}
        -:  184:
function _ZNK2ds10BinaryTreeIiE14find_min_valueEv called 2 returned 50% blocks executed 89%
        2:  185:	ElemType find_min_value() const {
        2:  186:		if (root_ == nullptr)
        2:  186-block 2
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  187:			throw std::runtime_error("can't find on empty tree.");
        1:  187-block 3
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  187-block 5
call    4 returned 0
    $$$$$:  187-block 9
call    5 never executed
        -:  188:
        1:  189:		return find_min_value_util(root_);
        1:  189-block 6
call    0 returned 1
        1:  189-block 8
        -:  190:	}
        -:  191:
function _ZNK2ds10BinaryTreeIiE8find_maxEv called 2 returned 100% blocks executed 80%
        2:  192:	BinaryTreeNode<ElemType>* find_max() const {
        2:  193:		if (root_ == nullptr)
        2:  193-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  194:			return nullptr;
    %%%%%:  194-block 3
        -:  195:
        2:  196:		return find_max_util(root_);
        2:  196-block 4
call    0 returned 2
        -:  197:	}
        -:  198:
function _ZNK2ds10BinaryTreeIiE8find_minEv called 1 returned 100% blocks executed 80%
        1:  199:	BinaryTreeNode<ElemType>* find_min() const {
        1:  200:		if (root_ == nullptr)
        1:  200-block 2
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  201:			return nullptr;
    %%%%%:  201-block 3
        -:  202:
        1:  203:		return find_min_util(root_);
        1:  203-block 4
call    0 returned 1
        -:  204:	}
        -:  205:
function _ZNK2ds10BinaryTreeIiE16calculate_heightEv called 4 returned 100% blocks executed 100%
        4:  206:	[[nodiscard]] size_t calculate_height() const {
        4:  207:		return calculate_height_util(root_);
        4:  207-block 2
call    0 returned 4
        -:  208:	}
        -:  209:
function _ZNK2ds10BinaryTreeIiE6is_bstEv called 6 returned 100% blocks executed 88%
        6:  210:	[[nodiscard]] bool is_bst() const {
        6:  211:		return is_bst_util(root_, std::numeric_limits<ElemType>::min(), std::numeric_limits<ElemType>::max());
        6:  211-block 2
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        6:  211-block 5
        6:  211-block 6
        6:  211-block 7
    $$$$$:  211-block 8
        -:  212:	}
        -:  213:};
        -:  214:
        -:  215:
        -:  216:
        -:  217:
        -:  218:
        -:  219:}
        -:  220:
        -:  221:
        -:  222:
        -:  223:
        -:  224:
        -:  225:
        -:  226:
        -:  227:
        -:  228:
        -:  229:
        -:  230:
        -:  231:
        -:  232:
        -:  233:
        -:  234:
        -:  235:
        -:  236:
        -:  237:
        -:  238:
        -:  239:
        -:  240:
