        -:    0:Source:/home/drowlia/code_save/ds/Queue/Queue.hpp
        -:    0:Graph:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/Tree/BinaryTreeTest.cpp.gcno
        -:    0:Data:/home/drowlia/code_save/ds/cmake-build-debug-/CMakeFiles/ds.dir/Tree/BinaryTreeTest.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by lsx31 on 24-12-9.
        -:    3://
        -:    4:
        -:    5:#pragma once
        -:    6:
        -:    7:#include <stdexcept>
        -:    8:
        -:    9:namespace ds {
        -:   10:
        -:   11:template <typename ElemType>
        -:   12:struct Node {
        -:   13:	ElemType data_;
        -:   14:	Node* next_{nullptr};
        -:   15:
function _ZN2ds4NodeIPNS_14BinaryTreeNodeIiEEEC2ERKS3_ called 7 returned 100% blocks executed 100%
        7:   16:	explicit Node(const ElemType& val) : data_{val}, next_{nullptr} {
        7:   17:	}
        -:   18:
function _ZN2ds4NodeIPNS_14BinaryTreeNodeIiEEED2Ev called 7 returned 100% blocks executed 100%
        7:   19:	~Node() {
        7:   20:		next_ = nullptr;
        7:   21:	}
        -:   22:
        -:   23:	Node(const Node& ano_node) : data_{ano_node.data_}, next_{nullptr} {
        -:   24:	}
        -:   25:};
        -:   26:
        -:   27:template <typename ElemType>
        -:   28:struct Queue {
        -:   29:	Node<ElemType>* front_{nullptr};
        -:   30:	Node<ElemType>* rear_{nullptr};
        -:   31:
function _ZN2ds5QueueIPNS_14BinaryTreeNodeIiEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   32:	Queue() : front_{nullptr}, rear_{nullptr} {}
        -:   33:
function _ZN2ds5QueueIPNS_14BinaryTreeNodeIiEEED2Ev called 1 returned 100% blocks executed 100%
        1:   34:	~Queue() {
        1:   35:		clear();
        1:   35-block 2
call    0 returned 1
        1:   36:	}
        -:   37:
        -:   38:	Queue(const Queue& ano_queue) : front_{nullptr}, rear_{nullptr} {
        -:   39:		auto* current = ano_queue.front_;
        -:   40:		while (current != nullptr) {
        -:   41:			enqueue(current->data_);
        -:   42:			current = current->next_;
        -:   43:		}
        -:   44:	}
        -:   45:
        -:   46:	Queue& operator=(const Queue& ano_queue) {
        -:   47:		if (this == &ano_queue)
        -:   48:			return *this;
        -:   49:
        -:   50:		clear();
        -:   51:
        -:   52:		auto* current = ano_queue.front_;
        -:   53:		while (current != nullptr) {
        -:   54:			enqueue(current->data_);
        -:   55:			current = current->next_;
        -:   56:		}
        -:   57:
        -:   58:		return *this;
        -:   59:	}
        -:   60:
function _ZN2ds5QueueIPNS_14BinaryTreeNodeIiEEE8is_emptyEv called 23 returned 100% blocks executed 100%
       23:   61:	bool is_empty() {
       23:   62:		return front_ == nullptr;
       23:   62-block 2
        -:   63:	}
        -:   64:
function _ZN2ds5QueueIPNS_14BinaryTreeNodeIiEEE5clearEv called 1 returned 100% blocks executed 80%
        1:   65:	void clear() {
        1:   66:		while (!is_empty()) {
        1:   66-block 2
        1:   66-block 4
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####:   67:			dequeue();
    %%%%%:   67-block 3
call    0 never executed
        -:   68:		}
        1:   69:	}
        -:   70:
function _ZN2ds5QueueIPNS_14BinaryTreeNodeIiEEE7enqueueERKS3_ called 7 returned 100% blocks executed 100%
        7:   71:	void enqueue(const ElemType& val) {
        7:   72:		auto* new_node = new Node<ElemType>(val);
        7:   72-block 2
call    0 returned 7
call    1 returned 7
        7:   73:		if (rear_)
branch  0 taken 5 (fallthrough)
branch  1 taken 2
        5:   74:			rear_->next_ = new_node;
        5:   74-block 5
        7:   75:		rear_ = new_node;
        -:   76:
        7:   77:		if (!front_)
        7:   77-block 6
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        2:   78:			front_ = rear_;
        2:   78-block 7
        7:   79:	}
        -:   80:
function _ZN2ds5QueueIPNS_14BinaryTreeNodeIiEEE7dequeueEv called 7 returned 100% blocks executed 71%
        7:   81:	ElemType dequeue() {
        7:   82:		if (is_empty())
        7:   82-block 2
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
    #####:   83:			throw std::runtime_error("empty queue");
    %%%%%:   83-block 4
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   83-block 6
call    4 never executed
    $$$$$:   83-block 14
call    5 never executed
        -:   84:
        7:   85:		auto* temp = front_;
        7:   86:		ElemType val = front_->data_;
        -:   87:
        7:   88:		front_ = front_->next_;
        7:   89:		if (front_ == nullptr)
        7:   89-block 7
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        2:   90:			rear_ = nullptr;
        2:   90-block 8
        -:   91:
        7:   92:		delete temp;
        7:   92-block 9
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   92-block 10
call    2 returned 7
call    3 returned 7
        7:   93:		temp = nullptr;
        -:   94:
        7:   95:		return val;
        7:   95-block 12
        7:   95-block 13
        -:   96:	}
        -:   97:
function _ZN2ds5QueueIPNS_14BinaryTreeNodeIiEEE4peekEv called 7 returned 100% blocks executed 56%
        7:   98:	ElemType peek() {
        7:   99:		if (is_empty()) {
        7:   99-block 2
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
    #####:  100:			throw std::runtime_error("empty queue");
    %%%%%:  100-block 4
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  100-block 6
call    4 never executed
    $$$$$:  100-block 9
call    5 never executed
        -:  101:		}
        7:  102:		return front_->data_;
        7:  102-block 7
        7:  102-block 8
        -:  103:	}
        -:  104:
        -:  105:	size_t size() {
        -:  106:		int counter = 0;
        -:  107:		auto* current = front_;
        -:  108:
        -:  109:		while (current != nullptr) {
        -:  110:			++counter;
        -:  111:			current = current->next_;
        -:  112:		}
        -:  113:
        -:  114:		return counter;
        -:  115:	}
        -:  116:};
        -:  117:
        -:  118:}
